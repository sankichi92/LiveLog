- provide(:title, @song.title)
- provide(:description, strip_tags(@song.comment).presence || "#{@song.live_title} #{@song.time_order} #{@song.playings.sort_by(&:inst_order).map { |p| "#{p.inst}.#{p.handle}" }.join(' ')}")
- provide(:og_type, 'music.song')
- provide(:og_image, @song.youtube_thumbnail('maxresdefault')) if policy(@song).play?
- content_for :additional_meta_fields do
  - @song.playings.each do |playing|
    %meta{ property: 'music:musician', content: user_url(playing.user) }

%article
  - if @song.youtube_id.present? && policy(@song).play?
    %script{ src: 'https://www.youtube.com/iframe_api', async: true }
    .embed-responsive.embed-responsive-16by9.mb-3
      = @song.youtube_embed

  %section.song-detail.card.mb-3
    .card-body
      %header
        .card-subtitle.text-muted
          = link_to @song.live_title, @song.live
          = @song.time_order
        %h1.card-title
          = @song.title
          %small= t('views.songs.original') if @song.original?
          = @song.status_icon if @song.player?(current_user)
      %dl
        - if @song.playings.present?
          %dt= t('views.songs.members')
          %dd= render @song.playings.sort_by(&:inst_order)
        - if @song.comment.present?
          %dt= t('views.songs.comment')
          %dd.text-muted= simple_format(@song.comment)
      %aside.btn-toolbar{ role: 'toolbar' }
        - if @song.published?
          .btn-group.mr-2{ role: 'group' }
            %button.btn.btn-primary.dropdown-toggle#share-button{ type: 'button', 'data-toggle': 'dropdown', 'aria-haspopup': 'true', 'aria-expanded': 'false' }
              = icon('fas', 'share') + ' ' + t('views.application.share')
            .dropdown-menu{ 'aria-labelledby': 'share-button' }
              = @song.twitter_share_button class: 'dropdown-item'
              = @song.facebook_share_button class: 'dropdown-item btn'
        - if policy(@song).edit?
          .btn-group
            = @song.edit_link class: 'btn btn-outline-primary'

  %aside.card.mb-3.d-none#itunes
    .card-body
      %h5.card-title#itunes-title
      .d-flex.align-items-center
        .artwork.mr-2
          %a.itunes-link
            %img.img-thumbnail#itunes-artwork{ target: '_blank' }
        .preview
          #itunes-track
          %audio#itunes-preview{ controls: true, volume: 0.8 }
          %a.itunes-link.d-block{ target: '_blank' }
            = image_tag 'JP_iTunes_Store_Buy_Badge_RGB.svg'
  - unless @song.original?
    :javascript
      fetchAndShowSongFromITunes("#{@song.name}", "#{@song.artist}");

  %nav
    %ul.pagination.pagination-lg.justify-content-center
      - if @song.previous.present?
        %li.page-item
          = link_to @song.previous, class: 'page-link' do
            %span{ 'aria-hidden': true } &laquo;
            = @song.previous.title
      - if @song.next.present?
        %li.page-item
          = link_to @song.next, class: 'page-link' do
            = @song.next.title
            %span{ 'aria-hidden': true } &raquo;

  - if @song.published?
    %section
      %header.page-header
        %h2 Related Songs
      .song-list.mb-3
        - if logged_in?
          = render @song.more_like_this.records(includes: [:live, { playings: :user }])
        - else
          = render partial: 'songs/song', collection: @song.more_like_this.records(includes: [:live, { playings: :user }]), cached: true
